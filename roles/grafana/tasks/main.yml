---
# tasks file for grafana role
# Installs Grafana and sets up Prometheus datasource and dashboards

# Install required packages for adding external APT repositories
- name: Install packages for Grafana
  ansible.builtin.apt:
    name:
      - apt-transport-https         # Enables APT over HTTPS
      - software-properties-common  # Tools for managing APT repositories
      - wget                        # Required for downloading files
    state: present
    update_cache: true

# Add Grafana's official GPG key for APT package verification
- name: Add Grafana APT key
  ansible.builtin.apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

# Add Grafana's APT repository to the system sources list
- name: Add Grafana APT repository
  ansible.builtin.apt_repository:
    repo: "deb https://packages.grafana.com/oss/deb stable main"
    state: present

# Install Grafana from the newly added repository
- name: Install Grafana
  ansible.builtin.apt:
    name: grafana
    state: present
    update_cache: true

# Enable and start the Grafana systemd service
- name: Enable and start Grafana service
  ansible.builtin.systemd:
    name: grafana-server
    enabled: true     # Start at boot
    state: started    # Start now
    daemon_reload: true  # Reload systemd to recognize the new service

# Create a separate datasource file for each Prometheus instance
- name: Provision multiple Prometheus datasources
  ansible.builtin.template:
    src: prometheus-datasource.yml.j2
    dest: "/etc/grafana/provisioning/datasources/{{ item.name }}.yml"
    owner: root
    group: grafana
    mode: '0644'
  loop: "{{ prometheus_targets }}"

# Import Prometheus dashboard (ID 19105) from local JSON file
- name: Import Prometheus dashboard
  ansible.builtin.uri:
    # Grafana API endpoint for dashboard import
    url: http://localhost:3000/api/dashboards/db
    method: POST
    user: admin                                   # Default Grafana username
    password: "{{ grafana_admin_password }}"      # Secure password loaded from Vault
    force_basic_auth: true                        # Required for basic authentication
    headers:
      Content-Type: "application/json"            # Required content type
    # Load dashboard JSON and post it to Grafana API
    # Steps below:
    # - lookup: load file
    # - from_json: parse it
    # - combine: wrap in Grafana structure
    # - to_json: convert back to JSON
    body: >-
      {{
        lookup('file', 'dashboard-prometheus.json')
        | from_json
        | combine({
            'dashboard': {'id': null, 'uid': 'prometheus-dashboard'},
            'overwrite': true,
            'folderId': 0,
            'message': 'Deployed via Ansible'
        })
        | to_json
      }}
    body_format: json
  register: prometheus_dashboard_result               # Optional: store result for debugging

# Import Node Exporter dashboard (ID 1860) from local JSON file
- name: Import Node Exporter dashboard
  ansible.builtin.uri:
    # Grafana API endpoint for dashboard import
    url: http://localhost:3000/api/dashboards/db
    method: POST
    user: admin                                   # Default Grafana username
    password: "{{ grafana_admin_password }}"      # Secure password loaded from Vault
    force_basic_auth: true                        # Required for basic authentication
    headers:
      Content-Type: "application/json"            # Required content type
    # Load dashboard JSON and post it to Grafana API
    # Steps below:
    # - lookup: load file
    # - from_json: parse it
    # - combine: wrap in Grafana structure
    # - to_json: convert back to JSON
    body: >-
      {{
        lookup('file', 'dashboard-node-exporter.json')
        | from_json
        | combine({
            'dashboard': {'id': null, 'uid': 'nodeexporter-dashboard'},
            'overwrite': true,
            'folderId': 0,
            'message': 'Deployed via Ansible'
        })
        | to_json
      }}
    body_format: json
  register: node_exporter_dashboard_result         # Optional: store result for debugging
